%h4.spaced= answer_template.text
%div{ class: "radio-question-inputs #{'multiple-question-container' if question.answer_templates.unarchived.where(template_name: 'radio', parent_answer_template_id: nil).count > 1 } "}
  - answer_template.answer_options.distinct.each do |answer_option|
    - child_templates = answer_template.child_templates(question, answer_option.new_value)
    .radio-input-container{ class: answer_option.display_class_or_default }
      = radio_button_tag "#{question.id}[#{answer_template.id}]", answer_option.id, have_checked?(answer, answer_template, answer_option.id), name: "response[#{answer_template.id}]", id: "question_#{question.id}_#{answer_template.id}_#{answer_option.new_value}", data: { hotkey: "#{answer_option.hotkey unless answer.locked?}", object: "#{'reveal-next-input' if child_templates.count > 0 }", target: "#{"question_#{question.id}_answer_#{answer_option.id}_secondary" if child_templates.count > 0}" }, disabled: answer.locked?
      %label{ for: "question_#{question.id}_#{answer_template.id}_#{answer_option.new_value}", style: "#{'cursor: default' if answer_session.locked?}" }
        %p= answer_option.text
        %span.hotkey= answer_option.hotkey if answer_option.hotkey.present?
      - if child_templates.count > 0
        .hidden-input{ data: { receiver: "question_#{question.id}_answer_#{answer_option.id}_secondary" } }
          - child_templates.each do |child_template|
            - if child_template.template_name.present? and answer_template != child_template
              = render "surveys/questions/answer_templates/child", question: question, answer_session: answer_session, child_template: child_template, answer: answer
  .clearfix
