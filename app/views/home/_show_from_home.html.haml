- @posts.each do |post|
  .dashboard-community-container
    .row.post-header
      .col-sm-1.col-xs-2
        = render 'forums/user_image', user: post.user, size: 75
      .col-sm-11.col-xs-10
        %h4.f300
          %span.f500= post.user.forum_name
          replied to
          = link_to post.topic.name, forum_topic_path(post.topic.forum.slug, post.topic.slug), class: 'no-underline'
        %p.small.muted-text
          = post.created_at.strftime("%-d %B %Y, %-l:%M %p")
    .row.post-content
      .col-sm-11.col-sm-offset-1.col-xs-10.col-xs-offset-2
        %p.lead
          - if post.description.length > 1000
            = simple_markdown(truncate(post.description, length: 1000))
            = link_to 'read more', forum_topic_post_path(post.topic.forum.slug, post.topic.slug, post), class: 'no-underline'
          - else
            = simple_markdown(post.description)
    .reply-container
      - unless post.topic.locked?
        - new_post = post.topic.posts.new
        = form_for [post.topic.forum, post.topic, new_post], html: { class: 'form-horizontal' } do |f|

          - if current_user.has_role? :moderator
            = f.hidden_field :status, value: 'approved'

          .row.reply
            .reply-user.col-sm-1.col-xs-2
              = image_tag current_user.photo_url, title: current_user.forum_name, data: { toggle: 'tooltip', container: 'body', placement: 'top' }
            .reply-field.col-sm-10.col-xs-9
              = f.text_area :description, rows: 1, style: 'resize: none;', class: 'reply-text-area', id: 'post_description_new', data: { object: 'text-area-autocomplete', mentions: SocialProfile.current.where.not(name: [nil, '']).pluck(:name).uniq.sort }
            .reply-submit.col-xs-1
              = f.submit "Reply", class: 'btn btn-primary reply-button', data: { disable_with: "Posting" }
