class Answer < ActiveRecord::Base
  include Deletable, DateAndTimeParser

  STATE = %(incomplete complete migrated locked)

  has_many :answer_values, -> { where deleted: false }, dependent: :destroy
  belongs_to :question
  belongs_to :answer_session
  has_one :in_edge, class_name: "AnswerEdge", foreign_key: "child_answer_id", dependent: :destroy
  has_one :out_edge, class_name: "AnswerEdge", foreign_key: "parent_answer_id", dependent: :destroy
  has_many :reports

  # Scopes
  scope :incomplete, -> { where(state: 'incomplete')}
  scope :invalid, -> { where(state: 'invalid') }
  scope :migrated, -> { where(state: 'migrated')}
  scope :complete, -> { where(state: ['complete', 'locked'])}
  scope :locked, -> { where(state: 'locked')}

  # Class Methods
  def self.first_answer(question, answer_session)
    Answer.current.where(question_id: question.id, answer_session_id: answer_session.id).first
  end

  def self.first_or_new(question, answer_session)
    self.first_answer(question, answer_session) || Answer.new(question_id: question.id, answer_session_id: answer_session.id)
  end

  # Instance Methods


  ## Value Methods
  ## Different options:
  # It gets complicated with many answer templates
  #   at most basic, one answer template with not allowed multiple ==> target field gets value
  #   then, one answer templates with allowed multiple ==> builds from array of values
  #
  #   we repeat this for all answer templates
  #
  #   the inputs can be single value, array of values, hash with answer templates as keys
  #   if multiple answer templates are present, then hash is NECESSARY

  # single value, raw value!
  # single value, answer option id (multiple_choice)
  # Multiple Values, answer option id (check_box)
  # (not supported now) multiple values,

  def value=(val)
    # Deal with nil values, generated by empty checkbox questions
    val = {} if val.nil?

    if locked?
      logger.warn "Attempting to change value of locked answer: survey: #{answer_session.survey.slug} | question: #{question.slug} | user: #{answer_session.user.email} | encounter: #{answer_session.encounter}"
      return nil
    end

    self[:preferred_not_to_answer] = (val.delete('preferred_not_to_answer') ? true : false)

    answer_values.clear
    template_completions = []
    template_values = []

    question.answer_templates.each do |template|
      target_field = template.data_type

      if val.kind_of?(Hash)
        val_for_template = val[template.id.to_s]
      else
        # Temporary - remove this option! Always set with hash
        raise StandardError
        #val_for_template = val
      end

      if template.preprocess.present?
        val_for_template = template.preprocess_value(val_for_template)
      end

      if question.display_type == 'custom_date_input'
        month = parse_integer(val_for_template[:month])
        day = parse_integer(val_for_template[:day])
        year = parse_integer(val_for_template[:year])
        val_for_template = parse_date_to_s("#{month}/#{day}/#{year}", "#{month}/#{day}/#{year}")
      end

      template_values << val_for_template

      # Test for nested inputs. There is a dependency: all conditionals are one-level, and the first answer template in questions with nested inputs is a categorical question that spawns the nesting.
      # TODO: Add Testing
      if template.target_answer_option.present? and template_completions.first
        answer_option_ids = template_values.first.kind_of?(Array) ? template_values.first : [template_values.first]
        answer_options = answer_option_ids.map{ |ao_id| AnswerOption.find(ao_id) }
        answer_option_values = answer_options.map(&:value)

        template_completion = answer_option_values.include?(template.target_answer_option) ? val_for_template.present? : true
      else
        template_completion = val_for_template.present?
      end

      template_completions << template_completion

      if template.allow_multiple and val_for_template.kind_of?(Array)
        val_for_template.each {|v| answer_values.build(target_field => v, 'answer_template_id' => template.id) }
      else
        answer_values.build(target_field => val_for_template, 'answer_template_id' => template.id)
      end
    end

    set_completion_state(template_completions)

    if self.persisted?
      self.save
    end
  end

  def value
    res = {}
    answer_values.each do |av|
      res[av.answer_template.id] ||= []
      res[av.answer_template.id] << av.value
    end

    res.each_pair { |k, v| res[k] = v.first if v.length == 1 }

    res
  end

  def string_value
    res = {}
    answer_values.each do |av|
      res[av.answer_template.id.to_s] ||= []
      res[av.answer_template.id.to_s] << av.string_value
    end

    res.each_pair { |k, v| res[k] = v.first if v.length == 1 }

    res
  end

  def show_value
    if answer_values.length == 1
      answer_values.first.show_value
    else
      answer_values.map(&:show_value).join(", ")
    end
  end
  ## End Value Methods

  ## DAG methods
  def next_answer
    out_edge.present? ? out_edge.child_answer : nil
  end

  def previous_answer
    in_edge.present? ? in_edge.parent_answer : nil
  end

  def descendants
    descendant_list = []

    head = self.next_answer
    while head
      descendant_list << head
      head = head.next_answer
    end

    descendant_list
  end

  def destroy_descendant_edges
    descendants.each do |d|
      d.in_edge.destroy if d.in_edge
      d.out_edge.destroy if d.out_edge
    end
  end
  ## End DAG Methods

  def next_question
    candidate_edges = QuestionEdge.where(parent_question_id: question.id, direct: true, survey_id: answer_session.survey.id)

    if candidate_edges.empty?
      nil
    else
      if candidate_edges.length == 1
        chosen_edge = candidate_edges.first
      else
        chosen_edge = candidate_edges.select {|e| fits_condition?(e.condition)}.first || candidate_edges.select { |e| e.condition == nil }.first || candidate_edges.first
      end

      chosen_edge.descendant
    end

  end

  def multiple_options?
    question.links_as_parent.length > 1
  end

  def complete?
    self[:state] == 'complete' or self[:state] == 'locked'
  end

  def incomplete?
    self[:state] == 'incomplete'
  end

  def locked?
    self[:state] == 'locked'
  end

  def invalid?
    self[:state] == 'invalid'
  end

  def validation_errors
    validator = AnswerValidator.new(question.slug)
    validator.messages(self)
  end

  private

  def set_completion_state(template_completions)
    validator = AnswerValidator.new(question.slug)
    validation_result = validator.validate(self)

    if preferred_not_to_answer
      self[:state] = 'complete'
    elsif validation_result[:valid]
      self[:state] = (template_completions.all? ? 'complete' : 'incomplete')
    else
      self[:state] = "invalid"
    end
  end

  def fits_condition?(condition)
    all_values = answer_values.map(&:string_value)

    all_values.include? condition
  end

end
